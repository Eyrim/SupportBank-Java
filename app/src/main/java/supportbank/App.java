/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package supportbank;

import supportbank.csv.CsvEntry;

import java.io.File;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.*;

public class App {
    public String getGreeting() {
        return "Hello World!";
    }

    public static List<CsvEntry> findCsvEntries(List<String> data) {
        String[] currentLine;
        List<CsvEntry> entries = new ArrayList<>();
        // We need to discard the first line as it's just key data
        data = data.stream().skip(1).toList();

        for (String entry : data) {
            currentLine = entry.split(",");

            entries.add(new CsvEntry(
               currentLine[0],
               currentLine[1],
               currentLine[2],
               currentLine[3],
//               Float.parseFloat(currentLine[4])
               new BigDecimal(currentLine[4])
            ));
        }

        return entries;
    }

    public static void main(String[] args) {
        try {
            // Read the file
            List<String> fileData = Reader.readFileToList(new File("/home/mfuller/Desktop/Bootcamp/week1/SupportBank-Java/Transactions2014.csv"));
            List<CsvEntry> entries = findCsvEntries(fileData);
//            List<Account> accounts = new ArrayList<>();
            Hashtable<String, Account> accounts = new Hashtable<>();
            List<String> names = new ArrayList<>();
            BigDecimal pot = new BigDecimal(0);
            String[] command;


            for (CsvEntry entry : entries) {
                // If the user doesn't have an account yet
                if (!accounts.containsKey(entry.getFrom())) {
                    // Create account for everyone in from
                    accounts.put(entry.getFrom(), new Account(entry.getFrom(), new BigDecimal(0)));
                }

                // If the owed doesn't have an account yet
                if (!accounts.containsKey(entry.getTo())) {
                    // Create account for everyone in to
                    accounts.put(entry.getTo(), new Account(entry.getTo(), new BigDecimal(0)));
                }

                // Modify the balance (add x to from, subtract x from to)
                accounts.get(entry.getFrom()).addToBalance(entry.getAmount());
                accounts.get(entry.getTo()).removeFromBalance(entry.getAmount());

                pot = pot.add(entry.getAmount());
            }

            System.out.println("POT: " + pot);
            System.out.println("DIFF: " + findDifference(accounts));

            try (Scanner sc = new Scanner(System.in)) {
                System.out.println("Enter command:");
                command = sc.nextLine().split(" ", 2);

                if (command[0].equals("list")) {
                    if (command[1].equals("all")) {
                        listAccounts(accounts);
                    } else {
                        listAccount(accounts.get(command[1]));
                    }
                }
            } catch (Exception e) {
            }

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void listAccounts(Hashtable<String, Account> accounts) {
        for (Account account : accounts.values()) {
            if (account.getBalance().doubleValue() >= 0) {
                System.out.printf(
                        "%s is owed: %s%n",
                        account.getName(),
                        truncateDecimal(account.getBalance(), 2)
                );
            } else {
                System.out.printf(
                        "%s owes: %s%n",
                        account.getName(),
                        truncateDecimal(account.getBalance(), 2)
                );
            }
        }
    }

    private static void listAccount(Account account) {
        if (account.getBalance().doubleValue() >= 0) {
            System.out.printf(
                    "%s is owed: %s%n",
                    account.getName(),
                    truncateDecimal(account.getBalance(), 2)
            );
        } else {
            System.out.printf(
                    "%s owes: %s%n",
                    account.getName(),
                    truncateDecimal(account.getBalance(), 2)
            );
        }
    }

    /**
     * <pre>Don't look inside this method please, it works
     * <strong>
     * This method assumes the value has numbers after the floating point
     * </strong>
     * </pre>
     * @param value The value to be truncated
     * @param places The number of decimal places
     * @return A string representation of the number, truncated to have two decimal places
     */
    private static String truncateDecimal(BigDecimal value, int places) { // TODO: 20/09/2023 REFACTOR
        return value.toString().split("\\.")[0] + "." + value.toString().split("\\.")[1].substring(0, places);
    }

    private static BigDecimal findDifference(Hashtable<String, Account> accounts) {
        BigDecimal total = new BigDecimal(0);

        for (Account account : accounts.values()) {
//            total += account.getBalance();
            total = total.add(account.getBalance());
        }

        return total;
    }
}
